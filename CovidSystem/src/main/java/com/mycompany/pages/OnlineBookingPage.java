package com.mycompany.pages;

// Import(s)
import com.mycompany.entity.Booking;
import com.mycompany.api.*;
import com.mycompany.covidsystem.ControlPanel;
import com.mycompany.entity.TestingSite;
import java.util.*;
import javax.swing.*;
import java.time.*;
import java.time.format.*;

/**
 * This class represents the online booking page
 */
public class OnlineBookingPage extends javax.swing.JPanel {
    
    // Manually included variable(s)
    private DefaultComboBoxModel<String> comboBoxModel;
    private List<Booking> bookings = new ArrayList<>();
    private DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private int numOfBookings;
    private TestingSite selectedTestingSite;
    private String customerId;
    private String startTime;
    private Double waitingTime;
    private static final ControlPanel controlPanel = ControlPanel.getControlPanel();
    private static final APIFactory<Booking> bookingFactory = FactoryCreator.getBookingFactory();
    private static final APIFactory<TestingSite> testingSiteFactory = FactoryCreator.getTestingSiteFactory();
    public static final double FIRST_DOUBLE_DIGIT = 10;

    /**
     * Creates new form OnlineBookingPage
     */
    public OnlineBookingPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        onlineBookingConfirmPanel = new javax.swing.JPanel();
        selectedTestingSiteLabel = new javax.swing.JLabel();
        selectedTestingSiteTextField = new javax.swing.JTextField();
        selectDateComboBox = new javax.swing.JComboBox<>();
        selectDateLabel = new javax.swing.JLabel();
        waitingTimeLabel = new javax.swing.JLabel();
        waitingTimeTextField = new javax.swing.JTextField();
        confirmBookingButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();

        onlineBookingConfirmPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        selectedTestingSiteLabel.setText("Selected Testing Site:");
        selectedTestingSiteLabel.setToolTipText("");

        selectDateComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateComboBoxActionPerformed(evt);
            }
        });

        selectDateLabel.setText("Select Date:");

        waitingTimeLabel.setText("Waiting Time (Hours):");

        confirmBookingButton.setText("Confirm Booking");
        confirmBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBookingButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout onlineBookingConfirmPanelLayout = new javax.swing.GroupLayout(onlineBookingConfirmPanel);
        onlineBookingConfirmPanel.setLayout(onlineBookingConfirmPanelLayout);
        onlineBookingConfirmPanelLayout.setHorizontalGroup(
            onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                        .addComponent(waitingTimeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(waitingTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                        .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(selectedTestingSiteLabel))
                            .addComponent(selectDateLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectDateComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(selectedTestingSiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(109, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, onlineBookingConfirmPanelLayout.createSequentialGroup()
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(confirmBookingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        onlineBookingConfirmPanelLayout.setVerticalGroup(
            onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlineBookingConfirmPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(logoutButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedTestingSiteLabel)
                    .addComponent(selectedTestingSiteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDateLabel))
                .addGap(18, 18, 18)
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(waitingTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(waitingTimeLabel))
                .addGap(128, 128, 128)
                .addGroup(onlineBookingConfirmPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBookingButton)
                    .addComponent(backButton))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(onlineBookingConfirmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(onlineBookingConfirmPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Setters
    public void setCustomerId(String customerId)                        {this.customerId = customerId;}
    
    public void setSelectedTestingSite(TestingSite selectedTestingSite) {this.selectedTestingSite = selectedTestingSite;}
    
    // This method is used to display the testing site selected by the user
    public void showSelectedTestingSite()
    {
        selectedTestingSiteTextField.setText(selectedTestingSite.getName());
    }
    
    // This method obtains the user's current date and time
    // The current date is obtained, as well as the date for the next 4 days
    // The maximum number of days in advance the user can book is 4
    // The user is also allowed to book in the current day
    // The constant DAYS_IN_ADVANCE is 5, because the current day is considered as a new day
    // Although technically it should be 4
    // Display the dates to the user
    public void getDates()
    {
        try
        {
            Get<TestingSite> testingSiteGet = testingSiteFactory.createGet();
            List<TestingSite> testingSites = testingSiteGet.createGetRequest();
            TestingSite thisTestingSite = null;
            for (TestingSite t: testingSites)
            {
                if (t.getName().equals(selectedTestingSiteTextField.getText()))
                {
                    thisTestingSite = t;
                }
            }
            comboBoxModel = new DefaultComboBoxModel<>();
            bookings = thisTestingSite.getBookings();
            LocalDateTime now = LocalDateTime.now();
            selectDateComboBox.setModel(comboBoxModel);
            for (int i = 0; i < HomeBookingPage.DAYS_IN_ADVANCE; i++)
            {
                comboBoxModel.addElement(dtf.format(now.plusDays(i)));
            }
        } 
        catch (Exception e) 
        {
            e.printStackTrace();
        }
    }
    
    // This method first obtains the date selected
    // Then it checks all the bookings of the testing site at the selected date
    // The waiting time is shown in hours
    // Each booking increases the waiting time by 30 minutes = 0.5 hours
    // Display waiting time
    private void selectDateComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateComboBoxActionPerformed
        String date = comboBoxModel.getSelectedItem().toString();
        numOfBookings = 0;
        for (Booking booking: bookings){
            startTime = booking.getStartTime();
            Instant instant = Instant.parse(startTime);
            LocalDateTime datetime = LocalDateTime.ofInstant(instant, ZoneOffset.UTC);
            String bookingDate = dtf.format(datetime);
            if (bookingDate.equals(date))
            {
                numOfBookings++;
            }
        }
        waitingTime = numOfBookings * 0.5;
        waitingTimeTextField.setText(String.valueOf(waitingTime));
    }//GEN-LAST:event_selectDateComboBoxActionPerformed

    // This method creates a Booking object and stores data
    // It performs logical checking conditions to create the start time of the booking
    private void confirmBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBookingButtonActionPerformed

        // To create start time
        // Waiting time + opening hour of testing site
        // The obtained result is the time, in the form of a number with the type as double
        // Obtain the date as a string
        // Format time and date into a String with Instant format
        // Instant format is used because that is how it is stored in the web service
        String tsoh = selectedTestingSite.getAdditionalInfo().getOpeningTime().substring(0, 2);
        int testingSiteOpeningHour = Integer.parseInt(tsoh);
        double newStartHour = waitingTime + Double.valueOf(testingSiteOpeningHour);
        String date = comboBoxModel.getSelectedItem().toString();
        String newStartTime;
        
        // Check if newStartHour has decimal of ".5"
        // ".5" here indicates 30 minutes
        // If it has a decimal of ".5"
        // "30" is added
        if (newStartHour % 1 != 0)
        {
            double flooredNewStartHour = Math.floor(newStartHour);
            if (newStartHour < FIRST_DOUBLE_DIGIT)
            {   
                newStartTime = String.format("%sT0%d:30:00.000Z", date, (int) flooredNewStartHour);  
            }
            else
            {
                newStartTime = String.format("%sT%d:30:00.000Z", date, (int) flooredNewStartHour);  
            }
        }
        // If it does not have a decimal of ".5"
        // "30" is not added
        else
        {
            if (newStartHour < FIRST_DOUBLE_DIGIT)
            {   
                newStartTime = String.format("%sT0%d:00:00.000Z", date, (int) newStartHour);  
            }
            else
            {
                newStartTime = String.format("%sT%d:00:00.000Z", date, (int) newStartHour);  
            }
        }

        // Create the Booking object and send it to the web service
        // Notify that the required details are sent
        try
        {
            Post bookingPost = bookingFactory.createPost();
            bookingPost.createPostRequest(customerId, selectedTestingSite.getId(), newStartTime);
            JOptionPane.showMessageDialog(null, "Booking has been confirmed.", "Booking Confirmation", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Booking Confirmation", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_confirmBookingButtonActionPerformed

    // This method is used to bring a user back to the login page
    // It is called when a button is clicked
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        controlPanel.logOut();
    }//GEN-LAST:event_logoutButtonActionPerformed

    // This method is used to bring a user back to the dialog
    // The dialog allows navigation to other pages
    // It is called when a button is clicked
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        controlPanel.showCustomerPage();
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton confirmBookingButton;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel onlineBookingConfirmPanel;
    private javax.swing.JComboBox<String> selectDateComboBox;
    private javax.swing.JLabel selectDateLabel;
    private javax.swing.JLabel selectedTestingSiteLabel;
    private javax.swing.JTextField selectedTestingSiteTextField;
    private javax.swing.JLabel waitingTimeLabel;
    private javax.swing.JTextField waitingTimeTextField;
    // End of variables declaration//GEN-END:variables
}
