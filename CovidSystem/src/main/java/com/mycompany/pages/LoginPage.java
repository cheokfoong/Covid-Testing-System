package com.mycompany.pages;

// Imports(s)
import com.mycompany.api.*;
import com.mycompany.covidsystem.ControlPanel;
import com.mycompany.entity.User;
import javax.swing.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.*;

/**
 * This class represents the login page
 */
public class LoginPage extends javax.swing.JPanel {
    
    // Manually included variable(s)
    private String username;
    private String password;
    private String jwt;
    private User user;
    private static final ControlPanel controlPanel = ControlPanel.getControlPanel();
    private static final APIFactory<User> userFactory = FactoryCreator.getUserFactory();

    public static final String API_KEY = "drrKN8HbB8Dq79TPPhkCLLh8zRzk9t";
    public static final String ROOT_URL = "https://fit3077.com/api/v2";  
    public static final String USER_URL = ROOT_URL + "/user";
    public static final String USER_LOGIN_URL = ROOT_URL + "/user/login";
    public static final String USER_VERIFY_JWT_TOKEN_URL = ROOT_URL + "/user/verify-token";
    public static final String TESTING_SITE_URL = ROOT_URL + "/testing-site";
    public static final String BOOKING_URL = ROOT_URL + "/booking";
    public static final String COVID_TEST_URL = ROOT_URL + "/covid-test";
    
    /**
     * Creates new form LoginPage
     */
    public LoginPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JTextField();
        covidTestingRegistrationSystemLabel = new javax.swing.JLabel();
        loginButton = new javax.swing.JButton();

        usernameLabel.setText("Username:");

        passwordLabel.setText("Password:");

        covidTestingRegistrationSystemLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        covidTestingRegistrationSystemLabel.setText("COVID Testing Registration System");

        loginButton.setText("Log In");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(passwordLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(covidTestingRegistrationSystemLabel))
                .addGap(207, 207, 207))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(covidTestingRegistrationSystemLabel)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addGap(34, 34, 34)
                .addComponent(loginButton)
                .addGap(227, 227, 227))
        );
    }// </editor-fold>//GEN-END:initComponents

    // This method is called when a user logs in
    // JWT token is verified
    // checkuserRole is called
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        username = usernameTextField.getText();
        password = passwordTextField.getText();
        try 
        {
            jwt = userLogin(username, password);
            verifyJwtToken(jwt);
            Get<User> userGet = userFactory.createGet();
            List<User> users = userGet.createGetRequest();
            user = getUserByUsername(users, username);
            checkUserRole(user);           
        } 
        catch(Exception e) 
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Login Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    // This method is used to check a user's role
    // It is assumed that a user only has one role
    // So it is implemented in a way such that only one of the if-else conditions is true
    // This only works when a user has one role
    // If a user has more than one role, this system will not work
    // Then it directs the user to its designated page based on their role
    private void checkUserRole(User user) 
    {
        // If user is a customer
        if (user.isCustomer() == true)
        {
            controlPanel.setCurrentUser(user);
            controlPanel.showCustomerPage();
        }
        // If user is a receptionist
        else if (user.isReceptionist() == true)
        {
            controlPanel.setCurrentUser(user);
            controlPanel.showReceptionistPage();
        }
        // If user is an administerer
        else if (user.isHealthcareWorker() == true)
        {
            controlPanel.setCurrentUser(user);
            controlPanel.showAdministererPage();
        }
    }

    // This method is to obtain a user by using their username
    public User getUserByUsername(List<User> users, String username)
    {
        User user = null;
        for (User u: users)
        {
            if (u.getUsername().equals(username))
            {
                user = u;
            }
        }
        return user;
    }

    // This method is to help a user to log in and generate a JWT token
    public String userLogin(String username, String password) throws Exception{
    
        String jsonString = "{" +
            "\"userName\":\"" + username + "\"," +
            "\"password\":\"" + password + "\"" +
            "}";
        
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest
                .newBuilder(URI.create(USER_LOGIN_URL + "?jwt=true"))
                .setHeader("Authorization", API_KEY)
                .header("Content-Type","application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jsonString))
                .build();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        if (response.statusCode() != 200) {
            throw new Exception("Invalid username or password");
        }
        
        //returning a jwt response token
        return response.body();
    }
    
    // This method is to verify a JWT token
    public void verifyJwtToken(String jwtToken) throws Exception{
        String jwt = jwtToken;
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest
                .newBuilder(URI.create(USER_VERIFY_JWT_TOKEN_URL))
                .setHeader("Authorization", API_KEY)
                .header("Content-Type","application/json")
                .POST(HttpRequest.BodyPublishers.ofString(jwt))
                .build();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        if (response.statusCode() != 200) {
            throw new Exception("Invalid username or password");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel covidTestingRegistrationSystemLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTextField;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}