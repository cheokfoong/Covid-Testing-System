package com.mycompany.pages;

// Import(s)
import com.mycompany.covidsystem.ControlPanel;
import com.mycompany.entity.Booking;
import com.mycompany.entity.User;
import java.awt.event.MouseEvent;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 * This class represents the user's profile page
 */
public class UserProfilePage extends javax.swing.JPanel {
    
    // Manually included variable(s)
    private static User currentUser;
    private static final ControlPanel controlPanel = ControlPanel.getControlPanel();
    private DefaultListModel<String> listModel = new DefaultListModel<>();
    private List<Booking> bookings = new ArrayList<>();
    private List<Booking> activeBookings = new ArrayList<>();
    public static final int DOUBLE_CLICK = 2;

    /**
     * Creates new form UserProfilePage
     */
    public UserProfilePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        userNameTextField = new javax.swing.JTextField();
        phoneNumberTextField = new javax.swing.JTextField();
        activeBookingsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        activeBookingsList = new javax.swing.JList<>();
        logOutBtn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("PROFILE");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Phone Number:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Name:");

        activeBookingsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Active Bookings");

        activeBookingsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                activeBookingsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(activeBookingsList);
        activeBookingsList.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout activeBookingsPanelLayout = new javax.swing.GroupLayout(activeBookingsPanel);
        activeBookingsPanel.setLayout(activeBookingsPanelLayout);
        activeBookingsPanelLayout.setHorizontalGroup(
            activeBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(activeBookingsPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(activeBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        activeBookingsPanelLayout.setVerticalGroup(
            activeBookingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(activeBookingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        logOutBtn.setText("Logout");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(userNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(phoneNumberTextField)))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeBookingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logOutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(logOutBtn)
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(userNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(phoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(activeBookingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
    }// </editor-fold>                        
    
    //This method is to log user out page to the login page
    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        controlPanel.logOut();
    }                                         

    //This method is to check that the booking exist when an active booking is double clicked
    //The booking information will then be stored and transferred to the modify booking page
    private void activeBookingsListMouseClicked(java.awt.event.MouseEvent evt) {                                                
        if ((evt.getClickCount() == DOUBLE_CLICK) && (evt.getButton() == MouseEvent.BUTTON1)){
            for (Booking booking: activeBookings){
                if (String.valueOf(booking.getTestingSite().getName() + " {" + booking.getStartTime() + "}").equals(activeBookingsList.getSelectedValue())){
                    controlPanel.showUserModifyBookingPage(booking,currentUser);
                }
            }
        }
    }                                               

    public void setUserProfileInfo(User user){
        currentUser = user;
        bookings = currentUser.getBookings();
    }
    
    
    //This method is to show the user's name and phone number details
    public void showUserProfileInfo(){
        userNameTextField.setText(currentUser.getFamilyName() + " " + currentUser.getGivenName());
        phoneNumberTextField.setText(currentUser.getPhoneNumber());
    }
    
    //This method is to show all active bookings in the user interface 
    public void showUserActiveBookings(){
        activeBookings.clear();
        listModel.removeAllElements();
        activeBookingsList.setModel(listModel);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        Instant instantNow = timestamp.toInstant();
        
        Instant currentInstant = Instant.now();
        Instant compareCurrentDate = currentInstant.truncatedTo(ChronoUnit.DAYS);
        
        for (Booking booking: bookings){
            
            // If booking is currently active
            if (booking.getStatus().equals("INITIATED")){
                // If booking is not a home testing
                if ((booking.getAdditionalInfo().getQrCode() == null) || (booking.getAdditionalInfo().getUrl() == null) || (booking.getAdditionalInfo().getRatKit() == null)){
                    String startTime = booking.getStartTime();
                    Instant instantBooking = Instant.parse(startTime);
                    Instant compareBookingDate = instantBooking.truncatedTo(ChronoUnit.DAYS);

                    int value = compareCurrentDate.compareTo(compareBookingDate); //compare which time is bigger
                
                    // If booking date is still valid
                    if(value < 0){
                        activeBookings.add(booking);
                    }
                }
            }
        }
        
        if (activeBookings.isEmpty() != true){
            for (Booking booking: activeBookings){
                listModel.addElement(booking.getTestingSite().getName() + " {" + booking.getStartTime() + "}");
            }
            activeBookingsList.setModel(listModel);
        }
        else{
            listModel.addElement("No active bookings found");
            activeBookingsList.setModel(listModel);
        }
    }
    
    
    
    // Variables declaration - do not modify                     
    private javax.swing.JList<String> activeBookingsList;
    private javax.swing.JPanel activeBookingsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JTextField userNameTextField;
    // End of variables declaration                   
}
